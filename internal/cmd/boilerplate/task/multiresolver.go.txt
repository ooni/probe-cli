package {{ .Package }}

//
// {{ .StructName }}
//
// Generated by `boilerplate' using the {{ .Template }} template.
//

import (
	"context"
	"sync"
	"time"

	"github.com/ooni/probe-cli/v3/internal/atomicx"
	"github.com/ooni/probe-cli/v3/internal/measurexlite"
	"github.com/ooni/probe-cli/v3/internal/netxlite"
	"github.com/ooni/probe-cli/v3/internal/model"
)

// {{ .Description }}
//
// The zero value of this structure IS NOT valid and you MUST initialize
// all the fields marked as MANDATORY before using this structure.
type {{ .StructName }} struct {
	// Domain is the MANDATORY domain to resolve.
	Domain string

	// IDGenerator is the MANDATORY atomic int64 to generate task IDs.
	IDGenerator *atomicx.Int64

	// Logger is the MANDATORY logger to use.
	Logger model.Logger

	// TestKeys is MANDATORY and contains the TestKeys.
	TestKeys *TestKeys

	// ZeroTime is the MANDATORY zero time of the measurement.
	ZeroTime time.Time

	// WaitGroup is the MANDATORY wait group this task belongs to.
	WaitGroup *sync.WaitGroup

	// DNSOverHTTPSURL is the optional DoH URL to use. If this field is not
	// set, we use a default one (e.g., `https://mozilla.cloudflare-dns.com/dns-query`).
	DNSOverHTTPSURL string

	// UDPAddress is the OPTIONAL address of the UDP resolver to use. If this
	// field is not set we use a default one (e.g., `8.8.8.8:53`).
	UDPAddress string
}

// Start starts this task in a background goroutine.
func (t *{{ .StructName }}) Start(ctx context.Context) {
	t.WaitGroup.Add(1)
	go func() {
		defer t.WaitGroup.Done() // synchronize with the parent
		t.Run(ctx)
	}()
}

// Run runs this task in the current goroutine.
func (t *{{ .StructName }}) Run(parentCtx context.Context) {
	// create output channels for the lookup
	systemOut := make(chan []string)
	udpOut := make(chan []string)
	httpsOut := make(chan []string)

	// start asynchronous lookups
	go t.lookupHostSystem(parentCtx, systemOut)
	go t.lookupHostUDP(parentCtx, udpOut)
	go t.lookupHostDNSOverHTTPS(parentCtx, httpsOut)

	// collect resulting IP addresses (which may be nil/empty lists)
	systemAddrs := <-systemOut
	udpAddrs := <-udpOut
	httpsAddrs := <-httpsOut

	// merge the resolved IP addresses
	merged := map[string]bool{}
	for _, addr := range systemAddrs {
		merged[addr] = true
	}
	for _, addr := range udpAddrs {
		merged[addr] = true
	}
	for _, addr := range httpsAddrs {
		merged[addr] = true
	}

	// rearrange addresses to have IPv4 first
	sorted := []string{}
	for addr := range merged {
		if v6, err := netxlite.IsIPv6(addr); err == nil && !v6 {
			sorted = append(sorted, addr)
		}
	}
	for addr := range merged {
		if v6, err := netxlite.IsIPv6(addr); err == nil && v6 {
			sorted = append(sorted, addr)
		}
	}

	// fan out a number of child async tasks to use the IP addrs
	for range sorted {
		// TODO: implement
	}
}

// lookupHostSystem performs a DNS lookup using the system resolver. This function must
// always emit an ouput on the [out] channel to synchronize with the caller func.
func (t *{{ .StructName }}) lookupHostSystem(parentCtx context.Context, out chan<- []string) {
	// create context with attached a timeout
	const timeout = 4 * time.Second // TODO: consider changing
	lookupCtx, lookpCancel := context.WithTimeout(parentCtx, timeout)
	defer lookpCancel()

	// create trace's index
	index := t.IDGenerator.Add(1)

	// create trace
	trace := measurexlite.NewTrace(index, t.ZeroTime)

	// start the operation logger
	ol := measurexlite.NewOperationLogger(t.Logger, "{{ .StructName }}+System#%d", index) // TODO: edit

	// runs the lookup
	reso := trace.NewStdlibResolver(t.Logger)
	addrs, err := reso.LookupHost(lookupCtx, t.Domain)
	_ = trace.DNSLookupsFromRoundTrip() // TODO: save
	ol.Stop(err)
	out <- addrs
}

// lookupHostUDP performs a DNS lookup using an UDP resolver. This function must always
// emit an ouput on the [out] channel to synchronize with the caller func.
func (t *{{ .StructName }}) lookupHostUDP(parentCtx context.Context, out chan<- []string) {
	// create context with attached a timeout
	const timeout = 4 * time.Second // TODO: consider changing
	lookupCtx, lookpCancel := context.WithTimeout(parentCtx, timeout)
	defer lookpCancel()

	// create trace's index
	index := t.IDGenerator.Add(1)

	// create trace
	trace := measurexlite.NewTrace(index, t.ZeroTime)

	// start the operation logger
	ol := measurexlite.NewOperationLogger(t.Logger, "{{ .StructName }}+UDP#%d", index) // TODO: edit

	// runs the lookup
	dialer := netxlite.NewDialerWithoutResolver(t.Logger)
	reso := trace.NewParallelUDPResolver(t.Logger, dialer, t.udpAddress())
	addrs, err := reso.LookupHost(lookupCtx, t.Domain)
	_ = trace.DNSLookupsFromRoundTrip() // TODO: save
	ol.Stop(err)
	out <- addrs
}

// Returns the UDP resolver we should be using by default.
func (t *{{ .StructName }}) udpAddress() string {
	if t.UDPAddress != "" {
		return t.UDPAddress
	}
	return "8.8.4.4:53"
}

// lookupHostDNSOverHTTPS performs a DNS lookup using a DoH resolver. This function must
// always emit an ouput on the [out] channel to synchronize with the caller func.
func (t *{{ .StructName }}) lookupHostDNSOverHTTPS(parentCtx context.Context, out chan<- []string) {
	// create context with attached a timeout
	const timeout = 4 * time.Second // TODO: consider changing
	lookupCtx, lookpCancel := context.WithTimeout(parentCtx, timeout)
	defer lookpCancel()

	// create trace's index
	index := t.IDGenerator.Add(1)

	// create trace
	trace := measurexlite.NewTrace(index, t.ZeroTime)

	// start the operation logger
	ol := measurexlite.NewOperationLogger(t.Logger, "{{ .StructName }}+DNSOverHTTPS#%d", index) // TODO: edit

	// runs the lookup
	reso := trace.NewParallelDNSOverHTTPSResolver(t.Logger, t.dnsOverHTTPSURL())
	addrs, err := reso.LookupHost(lookupCtx, t.Domain)
	reso.CloseIdleConnections()
	_ = trace.DNSLookupsFromRoundTrip() // TODO: save
	ol.Stop(err)
	out <- addrs
}

// Returns the DOH resolver URL we should be using by default.
func (t *{{ .StructName }}) dnsOverHTTPSURL() string {
	if t.DNSOverHTTPSURL != "" {
		return t.DNSOverHTTPSURL
	}
	return "https://mozilla.cloudflare-dns.com/dns-query"
}
