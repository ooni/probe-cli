package {{ .Package }}

//
// {{ .StructName }}
//
// Generated by `boilerplate' using the {{ .Template }} template.
//

import (
	"context"
	{{ if or (eq .Template "tls") (eq .Template "https") -}}
	"crypto/tls"
	{{- end }}
	{{ if or (eq .Template "http") (eq .Template "https") -}}
	"io"
	"net"
	"net/http"
	"net/url"
	{{- end }}
	"sync"
	"time"

	"github.com/ooni/probe-cli/v3/internal/atomicx"
	"github.com/ooni/probe-cli/v3/internal/measurexlite"
	"github.com/ooni/probe-cli/v3/internal/model"
	{{ if or (eq .Template "tls") (eq .Template "https") (eq .Template "http") -}}
	"github.com/ooni/probe-cli/v3/internal/netxlite"
	{{- end }}
)

// {{ .Description }}
//
// The zero value of this structure IS NOT valid and you MUST initialize
// all the fields marked as MANDATORY before using this structure.
type {{ .StructName }} struct {
	// Address is the MANDATORY address to connect to.
	Address string

	// IDGenerator is the MANDATORY atomic int64 to generate task IDs.
	IDGenerator *atomicx.Int64

	// Logger is the MANDATORY logger to use.
	Logger model.Logger

	// TestKeys is MANDATORY and contains the TestKeys.
	TestKeys *TestKeys

	// ZeroTime is the MANDATORY measurement's zero time.
	ZeroTime time.Time

	// WaitGroup is the MANDATORY wait group this task belongs to.
	WaitGroup *sync.WaitGroup

	{{ if or (eq .Template "tls") (eq .Template "https") }}
	// ALPN is the OPTIONAL ALPN to use.
	ALPN []string
	{{ end }}

	// CookieJar contains the OPTIONAL cookie jar, used for redirects.
	CookieJar http.CookieJar

	{{ if or (eq .Template "http") (eq .Template "https") }}
	// HostHeader is the OPTIONAL host header to use.
	HostHeader string

	{{ if or (eq .Template "tls") (eq .Template "https") }}
	// SNI is the OPTIONAL SNI to use.
	SNI string
	{{ end }}

	// URLPath is the OPTIONAL URL path.
	URLPath string

	// URLRawQuery is the OPTIONAL URL raw query.
	URLRawQuery string
	{{ end }}
}

// Start starts this task in a background goroutine.
func (t *{{ .StructName }}) Start(ctx context.Context) {
	t.WaitGroup.Add(1)
	index := t.IDGenerator.Add(1)
	go func() {
		defer t.WaitGroup.Done() // synchronize with the parent
		t.Run(ctx, index)
	}()
}

// Run runs this task in the current goroutine.
func (t *{{ .StructName }}) Run(parentCtx context.Context, index int64) {
	// create trace
	trace := measurexlite.NewTrace(index, t.ZeroTime)

	// start the operation logger
	ol := measurexlite.NewOperationLogger(t.Logger, "{{ .StructName }}#%d", index) // TODO: edit

	{{ if or (eq .Template "tcp") (eq .Template "tls") (eq .Template "https") (eq .Template "http") }}
	// perform the TCP connect
	const tcpTimeout = 10 * time.Second // TODO: consider changing
	tcpCtx, tcpCancel := context.WithTimeout(parentCtx, tcpTimeout)
	defer tcpCancel()
	tcpDialer := trace.NewDialerWithoutResolver(t.Logger)
	tcpConn, err := tcpDialer.DialContext(tcpCtx, "tcp", t.Address)
	_ = <-trace.TCPConnect // TODO: save
	if err != nil {
		ol.Stop(err)
		return
	}
	defer func() {
		_ = trace.NetworkEvents() // TODO: save
		tcpConn.Close()
	}()
	{{ end }}

	{{ if or (eq .Template "tls") (eq .Template "https") }}
	// perform TLS handshake
	tlsSNI, err := t.sni()
	if err != nil {
		t.TestKeys.SetFundamentalFailure(err)
		ol.Stop(err)
		return
	}
	tlsHandshaker := trace.NewTLSHandshakerStdlib(t.Logger)
	tlsConfig := &tls.Config{
		NextProtos: t.alpn(),
		RootCAs:    netxlite.NewDefaultCertPool(),
		ServerName: tlsSNI,
	}
	const tlsTimeout = 10 * time.Second // TODO: consider changing
	tlsCtx, tlsCancel := context.WithTimeout(parentCtx, tlsTimeout)
	defer tlsCancel()
	tlsConn, tlsConnState, err := tlsHandshaker.Handshake(tlsCtx, tcpConn, tlsConfig)
	_ = <-trace.TLSHandshake // TODO: save
	if err != nil {
		ol.Stop(err)
		return
	}
	defer tlsConn.Close()
	alpn := tlsConnState.NegotiatedProtocol
	{{ else }}
	alpn := "" // no ALPN because we're not using TLS
	{{ end }}

	{{ if eq .Template "http" }}
	// create HTTP transport
	httpTransport := netxlite.NewHTTPTransport(
		t.Logger,
		netxlite.NewSingleUseDialer(tcpConn),
		netxlite.NewNullTLSDialer(),
	)
	{{ else if eq .Template "https" }}
	// create HTTP transport
	httpTransport := netxlite.NewHTTPTransport(
		t.Logger,
		netxlite.NewNullDialer(),
		// note: netxlite guarantees that here tlsConn is a netxlite.TLSConn
		netxlite.NewSingleUseTLSDialer(tlsConn.(netxlite.TLSConn)),
	)
	{{ end }}

	{{ if or (eq .Template "http") (eq .Template "https") }}
	// create HTTP request
	const httpTimeout = 10 * time.Second // TODO: consider changing
	httpCtx, httpCancel := context.WithTimeout(parentCtx, httpTimeout)
	defer httpCancel()
	httpReq, err := t.newHTTPRequest(httpCtx)
	if err != nil {
		t.TestKeys.SetFundamentalFailure(err)
		ol.Stop(err)
		return
	}

	// perform HTTP transaction
	httpResp, httpRespBody, err := t.httpTransaction(
		httpCtx,
		"tcp",
		t.Address,
		alpn,
		httpTransport,
		httpReq,
		trace,
	)
	if err != nil {
		ol.Stop(err)
		return
	}

	// TODO: insert here additional code if needed
	_ = httpResp
	_ = httpRespBody
	{{ end }}

	// completed successfully
	ol.Stop(nil)
}

{{ if or (eq .Template "tls") (eq .Template "https") }}
// alpn returns the user-configured ALPN or a reasonable default
func (t *{{ .StructName }}) alpn() []string {
	if len(t.ALPN) > 0 {
		return t.ALPN
	}
	{{ if eq .Template "https" }}
	return []string{"h2", "http/1.1"}
	{{ else }}
	return []string{}
	{{ end }}
}

// sni returns the user-configured SNI or a reasonable default
func (t *{{ .StructName }}) sni() (string, error) {
	if t.SNI != "" {
		return t.SNI, nil
	}
	addr, _, err := net.SplitHostPort(t.Address)
	if err != nil {
		return "", err
	}
	return addr, nil
}
{{ end }}

{{ if or (eq .Template "http") (eq .Template "https") }}
// urlHost computes the host to include into the URL
func (t *{{ .StructName }}) urlHost(scheme string) (string, error) {
	addr, port, err := net.SplitHostPort(t.Address)
	if err != nil {
		t.Logger.Warnf("BUG: net.SplitHostPort failed for %s: %s", t.Address, err.Error())
		return "", err
	}
	urlHost := t.HostHeader
	if urlHost == "" {
		urlHost = addr
	}
	{{ if eq .Template "http" -}}
	if port == "80" && scheme == "http" {
		return urlHost, nil
	}
	{{- else if eq .Template "https" -}}
	if port == "443" && scheme == "https" {
		return urlHost, nil
	}
	{{- end }}
	urlHost = net.JoinHostPort(urlHost, port)
	return urlHost, nil
}

// newHTTPRequest creates a new HTTP request.
func (t *{{ .StructName }}) newHTTPRequest(ctx context.Context) (*http.Request, error) {
	const urlScheme = "{{ if eq .Template "http" }}http{{ else }}https{{ end }}"
	urlHost, err := t.urlHost(urlScheme)
	if err != nil {
		return nil, err
	}
	httpURL := &url.URL{
		Scheme:   urlScheme,
		Host:     urlHost,
		Path:     t.URLPath,
		RawQuery: t.URLRawQuery,
	}
	httpReq, err := http.NewRequestWithContext(ctx, "GET", httpURL.String(), nil)
	if err != nil {
		return nil, err
	}
	httpReq.Header.Set("Host", t.HostHeader)
	httpReq.Header.Set("Accept", model.HTTPHeaderAccept)
	httpReq.Header.Set("Accept-Language", model.HTTPHeaderAcceptLanguage)
	httpReq.Header.Set("User-Agent", model.HTTPHeaderUserAgent)
	httpReq.Host = t.HostHeader
	if t.CookieJar != nil {
		for _, cookie := range t.CookieJar.Cookies(httpURL) {
			httpReq.AddCookie(cookie)
		}
	}
	return httpReq, nil
}

// httpTransaction runs the HTTP transaction and saves the results.
func (t *{{ .StructName }}) httpTransaction(ctx context.Context, network, address, alpn string,
	txp model.HTTPTransport, req *http.Request, trace *measurexlite.Trace) (*http.Response, []byte, error) {
	const maxbody = 1 << 19 // TODO: you may want to change this default
	started := trace.TimeSince(trace.ZeroTime)
	resp, err := txp.RoundTrip(req)
	var body []byte
	if err == nil {
		defer resp.Body.Close()
		if cookies := resp.Cookies(); t.CookieJar != nil && len(cookies) > 0 {
			t.CookieJar.SetCookies(req.URL, cookies)
		}
		reader := io.LimitReader(resp.Body, maxbody)
		body, err = netxlite.ReadAllContext(ctx, reader)
	}
	finished := trace.TimeSince(trace.ZeroTime)
	ev := measurexlite.NewArchivalHTTPRequestResult(
		trace.Index,
		started,
		network,
		address,
		alpn,
		txp.Network(),
		req,
		resp,
		maxbody,
		body,
		err,
		finished,
	)
	_ = ev // TODO: save
	return resp, body, err
}
{{ end }}
