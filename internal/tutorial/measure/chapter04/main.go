// -=-=- StartHere -=-=-
//
// # Chapter IV: TLS handshaking
//
// This chapter describes the *TLS handshake flow*. This flow connects
// to a TCP endpoint and then performs a TLS handshake.
//
// Without further ado, let's describe our example `main.go` program
// and let's use it to better understand this flow.
//
// (This file is auto-generated. Do not edit it directly! To apply
// changes you need to modify `./internal/tutorial/measure/chapter04/main.go`.)
//
// ## main.go
//
// The initial part of the program is pretty much the same as the one
// used in previous chapters, so I will not add further comments.
//
// ```Go
package main

import (
	"context"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"time"

	"github.com/apex/log"
	"github.com/ooni/probe-cli/v3/internal/measure"
	"github.com/ooni/probe-cli/v3/internal/netxlite"
	"github.com/ooni/probe-cli/v3/internal/runtimex"
)

func main() {
	address := flag.String("address", "8.8.4.4:443", "remote endpoint address")
	sni := flag.String("sni", "dns.google", "SNI to use")
	timeout := flag.Duration("timeout", 4*time.Second, "timeout to use")
	flag.Parse()
	log.SetLevel(log.DebugLevel)
	ctx, cancel := context.WithTimeout(context.Background(), *timeout)
	defer cancel()
	begin := time.Now()
	trace := measure.NewTrace(begin)
	mx := measure.NewMeasurerStdlib(begin, log.Log, trace)
	// ```
	//
	// We run the flow to obtain a measurement. We don't need to
	// close the TLS connection: flows are self-contained.
	//
	// These are the arguments:
	//
	// - ctx for propagating timeout information;
	//
	// - the address of the TCP endpoint;
	//
	// - a TLS config containing the ALPN settings, the SNI
	// settings and the root CA to use.
	//
	// ```Go
	m := mx.TLSEndpointDial(ctx, *address, &tls.Config{
		NextProtos: []string{"h2", "http/1.1"},
		ServerName: *sni,
		RootCAs:    netxlite.NewDefaultCertPool(),
	})
	// ```
	//
	// And this is the usual spell to print the measurement.
	//
	// ```Go
	data, err := json.Marshal(m)
	runtimex.PanicOnError(err, "json.Marshal failed")
	fmt.Printf("%s\n", string(data))
}

// ```
//
// ## Running the example program
//
// As before, let us start off with a vanilla run:
//
// ```bash
// go run -race ./internal/tutorial/measure/chapter04
// ```
//
// Let us comment the JSON in detail:
//
// ```JavaScript
// {
//   // This section is generated by the connector and we have
//   // already encountered it several times now. Only, this time
//   // is wrapped inside a key clarifying this piece of data
//   // has been produced by the TCP connect operation.
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "8.8.4.4:443",
//     "started": 24494708,
//     "completed": 81757167,
//     "failure": null
//   },
//
//   // This section is new and is generated by the TLS
//   // handshaker, so let's look at it in detail.
//   "tls_handshake": {
//     // This says we are using the stdlib to generate TLS conns
//     "engine": "stdlib",
//
//     // This is the endpoint address with which we're handshaking.
//     "address": "8.8.4.4:443",
//
//     // This is a summary of the relevant config bits. We see
//     // the SNI, the ALPN, and that we _are_ verifying certificates.
//     "config": {
//       "sni": "dns.google",
//       "alpn": [
//         "h2",
//         "http/1.1"
//       ],
//       "no_tls_verify": false
//     },
//
//     // These fields as usual say when the operation
//     // started and completed.
//     "started": 81761708,
//     "completed": 183380292,
//
//     // This indicates there was no error.
//     "failure": null,
//
//     // This provides information on the state of the connection. We
//     // see the version, the cipher suite, the negotiated protocol and
//     // the x509 certificate chain encoded as base64.
//     "connection_state": {
//       "tls_version": "TLSv1.3",
//       "cipher_suite": "TLS_AES_128_GCM_SHA256",
//       "negotiated_protocol": "h2",
//       "peer_certificates": [
//         "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",
//         "MIIFljCCA36gAwIBAgINAgO8U1lrNMcY9QFQZjANBgkqhkiG9w0BAQsFADBHMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEUMBIGA1UEAxMLR1RTIFJvb3QgUjEwHhcNMjAwODEzMDAwMDQyWhcNMjcwOTMwMDAwMDQyWjBGMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzETMBEGA1UEAxMKR1RTIENBIDFDMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPWI3+dijB43+DdCkH9sh9D7ZYIl/ejLa6T/belaI+KZ9hzpkgOZE3wJCor6QtZeViSqejOEH9Hpabu5dOxXTGZok3c3VVP+ORBNtzS7XyV3NzsXlOo85Z3VvMO0Q+sup0fvsEQRY9i0QYXdQTBIkxu/t/bgRQIh4JZCF8/ZK2VWNAcmBA2o/X3KLu/qSHw3TT8An4Pf73WELnlXXPxXbhqW//yMmqaZviXZf5YsBvcRKgKAgOtjGDxQSYflispfGStZloEAoPtR28p3CwvJlk/vcEnHXG0g/Zm0tOLKLnf9LdwLtmsTDIwZKxeWmLnwi/agJ7u2441Rj72ux5uxiZ0CAwEAAaOCAYAwggF8MA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUinR/r4XN7pXNPZzQ4kYU83E1HScwHwYDVR0jBBgwFoAU5K8rJnEaK0gnhS9SZizv8IkTcT4waAYIKwYBBQUHAQEEXDBaMCYGCCsGAQUFBzABhhpodHRwOi8vb2NzcC5wa2kuZ29vZy9ndHNyMTAwBggrBgEFBQcwAoYkaHR0cDovL3BraS5nb29nL3JlcG8vY2VydHMvZ3RzcjEuZGVyMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwucGtpLmdvb2cvZ3RzcjEvZ3RzcjEuY3JsMFcGA1UdIARQME4wOAYKKwYBBAHWeQIFAzAqMCgGCCsGAQUFBwIBFhxodHRwczovL3BraS5nb29nL3JlcG9zaXRvcnkvMAgGBmeBDAECATAIBgZngQwBAgIwDQYJKoZIhvcNAQELBQADggIBAIl9rCBcDDy+mqhXlRu0rvqrpXJxtDaV/d9AEQNMwkYUuxQkq/BQcSLbrcRuf8/xam/IgxvYzolfh2yHuKkMo5uhYpSTld9brmYZCwKWnvy15xBpPnrLRklfRuFBsdeYTWU0AIAaP0+fbH9JAIFTQaSSIYKCGvGjRFsqUBITTcFTNvNCCK9U+o53UxtkOCcXCb1YyRt8OS1b887U7ZfbFAO/CVMkH8IMBHmYJvJh8VNS/UKMG2YrPxWhu//2m+OBmgEGcYk1KCTd4b3rGS3hSMs9WYNRtHTGnXzGsYZbr8w0xNPM1IERlQCh9BIiAfq0g3GvjLeMcySsN1PCAJA/Ef5c7TaUEDu9Ka7ixzpiO2xj2YC/WXGsYye5TBeg2vZzFb8q3o/zpWwygTMD0IZRcZk0upONXbVRWPeyk+gB9lm+cZv9TSjOz23HFtz30dZGm6fKa+l3D/2gthsjgx0QGtkJAITgRNOidSOzNIb2ILCkXhAd4FJGAJ2xDx8hcFH1mt0G/FX0Kw4zd8NLQsLxdxP8c4CU6x+7Nz/OAipmsHMdMqUybDKwjuDEI/9bfU1lcKwrmz3O2+BtjjKAvpafkmO8l7tdufThcV4q5O8DIrGKZTqPwJNl1IXNDw9bg1kWRxYtnCQ6yICmJhSFm/Y3m6xv+cXDBlHz4n/FsRC6UfTd",
//         "MIIFYjCCBEqgAwIBAgIQd70NbNs2+RrqIQ/E8FjTDTANBgkqhkiG9w0BAQsFADBXMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEQMA4GA1UECxMHUm9vdCBDQTEbMBkGA1UEAxMSR2xvYmFsU2lnbiBSb290IENBMB4XDTIwMDYxOTAwMDA0MloXDTI4MDEyODAwMDA0MlowRzELMAkGA1UEBhMCVVMxIjAgBgNVBAoTGUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxFDASBgNVBAMTC0dUUyBSb290IFIxMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAthECix7joXebO9y/lD63ladAPKH9gvl9MgaCcfb2jH/76Nu8ai6Xl6OMS/kr9rH5zoQdsfnFl97vufKj6bwSiV6nqlKr+CMny6SxnGPb15l+8Ape62im9MZaRw1NEDPjTrETo8gYbEvs/AmQ351kKSUjB6G00j0uYODP0gmHu81I8E3CwnqIiru6z1kZ1q+PsAewnjHxgsHA3y6mbWwZDrXYfiYaRQM9sHmklCitD38m5agI/pboPGiUU+6DOogrFZYJsuB6jC511pzrp1Zkj5ZPaK49l8KEj8C8QMALXL32h7M1bKwYUH+E4EzNktMg6TO8UpmvMrUpsyUqtEj5cuHKZPfmghCN6J3Cioj6OGaK/GP5Afl4/Xtcd/p2h/rs37EOeZVXtL0m79YB0esWCruOC7XFxYpVq9Os6pFLKcwZpDIlTirxZUTQAs6qzkm06p98g7BAe+dDq6dso499iYH6TKX/1Y7DzkvgtdizjkXPdsDtQCv9Uw+wp9U7DbGKogPeMa3Md+pvez7W35EiEua++tgy/BBjFFFy3l3WFpO9KWgz7zpm7AeKJt8T11dleCfeXkkUAKIAf5qoIbapsZWwpbkNFhHax2xIPEDgfg1azVY80ZcFuctL7TlLnMQ/0lUTbiSw1nH69MG6zO0b9f6BQdgAmD06yK56mDcYBZUCAwEAAaOCATgwggE0MA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTkrysmcRorSCeFL1JmLO/wiRNxPjAfBgNVHSMEGDAWgBRge2YaRQ2XyolQL30EzTSo//z9SzBgBggrBgEFBQcBAQRUMFIwJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnBraS5nb29nL2dzcjEwKQYIKwYBBQUHMAKGHWh0dHA6Ly9wa2kuZ29vZy9nc3IxL2dzcjEuY3J0MDIGA1UdHwQrMCkwJ6AloCOGIWh0dHA6Ly9jcmwucGtpLmdvb2cvZ3NyMS9nc3IxLmNybDA7BgNVHSAENDAyMAgGBmeBDAECATAIBgZngQwBAgIwDQYLKwYBBAHWeQIFAwIwDQYLKwYBBAHWeQIFAwMwDQYJKoZIhvcNAQELBQADggEBADSkHrEoo9C0dhemMXoh6dFSPsjbdBZBiLg9NR3t5P+T4Vxfq7vqfM/b5A3Ri1fyJm9bvhdGaJQ3b2t6yMAYN/olUazsaL+yyEn9WprKASOshIArAoyZl+tJaox118fessmXn1hIVw41oeQa1v1vg4Fv74zPl6/AhSrw9U5pCZEt4Wi4wStz6dTZ/CLANx8LZh1J7QJVj2fhMtfTJr9w4z30Z209fOU0iOMy+qduBmpvvYuR7hZL6Dupszfnw0Skfths18dG9ZKb59UhvmaSGZRVbNQpsg3BZlvid0lIKO2d1xozclOzgjXPYovJJIultzkMu34qQb9Sz/yilrbCgj8="
//       ]
//     }
//   },
//
//   // This is the usual section containing the trace. This
//   // time the trace pertains to a TCP connection.
//   "network_events": [
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 83494083,
//       "completed": 83528042,
//       "failure": null,
//       "num_bytes": 280
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 83540917,
//       "completed": 171196542,
//       "failure": null,
//       "num_bytes": 517
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 174609417,
//       "completed": 174619958,
//       "failure": null,
//       "num_bytes": 2259
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 174625750,
//       "completed": 176255917,
//       "failure": null,
//       "num_bytes": 2043
//     },
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 183221458,
//       "completed": 183250458,
//       "failure": null,
//       "num_bytes": 64
//     },
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 183400333,
//       "completed": 183413208,
//       "failure": null,
//       "num_bytes": 24
//     }
//   ]
// }
// ```
//
// Let us now provoke some errors.
//
// First, let's see what if the connection fails.
//
// ```bash
// go run -race ./internal/tutorial/measure/chapter04 -address 8.8.4.4:1
// ```
//
// Here's the JSON:
//
// ```JSON
// {
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "8.8.4.4:1",
//     "started": 22418333,
//     "completed": 4006573458,
//     "failure": "generic_timeout_error"
//   },
//   "tls_handshake": null,
//   "network_events": null
// }
// ```
//
// Now let us try what happens with a different SNI:
//
// ```bash
// go run -race ./internal/tutorial/measure/chapter04 -sni example.org
// ```
//
// And here's the JSON:
//
// ```JSON
// {
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "8.8.4.4:443",
//     "started": 22301208,
//     "completed": 68768208,
//     "failure": null
//   },
//   "tls_handshake": {
//     "engine": "stdlib",
//     "address": "8.8.4.4:443",
//     "config": {
//       "sni": "example.org",
//       "alpn": [
//         "h2",
//         "http/1.1"
//       ],
//       "no_tls_verify": false
//     },
//     "started": 68773166,
//     "completed": 362352750,
//     "failure": "ssl_invalid_hostname",
//     "connection_state": {
//       "tls_version": "",
//       "cipher_suite": "",
//       "negotiated_protocol": "",
//       "peer_certificates": [
//         "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"
//       ]
//     }
//   },
//   "network_events": [
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 70212416,
//       "completed": 70248750,
//       "failure": null,
//       "num_bytes": 281
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 70258583,
//       "completed": 354716291,
//       "failure": null,
//       "num_bytes": 517
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 361016583,
//       "completed": 361057125,
//       "failure": null,
//       "num_bytes": 4302
//     },
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 362114208,
//       "completed": 362169833,
//       "failure": null,
//       "num_bytes": 30
//     }
//   ]
// }
// ```
//
// Here we see that the TLS handshake fails and we are getting
// the offending certificate in the `peer_certificates`.
//
// Let us now try with a self-signed certificate:
//
// ```bash
// go run -race ./internal/tutorial/measure/chapter04 -address 104.154.89.105:443 -sni self-signed.badssl.com
// ```
//
// Which leads to this JSON:
//
// ```JSON
// {
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "104.154.89.105:443",
//     "started": 25273542,
//     "completed": 72407709,
//     "failure": null
//   },
//   "tls_handshake": {
//     "engine": "stdlib",
//     "address": "104.154.89.105:443",
//     "config": {
//       "sni": "self-signed.badssl.com",
//       "alpn": [
//         "h2",
//         "http/1.1"
//       ],
//       "no_tls_verify": false
//     },
//     "started": 72413792,
//     "completed": 398552584,
//     "failure": "ssl_unknown_authority",
//     "connection_state": {
//       "tls_version": "",
//       "cipher_suite": "",
//       "negotiated_protocol": "",
//       "peer_certificates": [
//         "MIIDeTCCAmGgAwIBAgIJAPziuikCTox4MA0GCSqGSIb3DQEBCwUAMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMQ8wDQYDVQQKDAZCYWRTU0wxFTATBgNVBAMMDCouYmFkc3NsLmNvbTAeFw0xOTEwMDkyMzQxNTJaFw0yMTEwMDgyMzQxNTJaMGIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMQ8wDQYDVQQKDAZCYWRTU0wxFTATBgNVBAMMDCouYmFkc3NsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIE7PiM7gTCs9hQ1XBYzJMY61yoaEmwIrX5lZ6xKyx2PmzAS2BMTOqytMAPgLaw+XLJhgL5XEFdEyt/ccRLvOmULlA3pmccYYz2QULFRtMWhyefdOsKnRFSJiFzbIRMeVXk0WvoBj1IFVKtsyjbqv9u/2CVSndrOfEk0TG23U3AxPxTuW1CrbV8/q71FdIzSOciccfCFHpsKOo3St/qbLVytH5aohbcabFXRNsKEqveww9HdFxBIuGa+RuT5q0iBikusbpJHAwnnqP7i/dAcgCskgjZjFeEU4EFy+b+a1SYQCeFxxC7c3DvaRhBB0VVfPlkPz0sw6l865MaTIbRyoUCAwEAAaMyMDAwCQYDVR0TBAIwADAjBgNVHREEHDAaggwqLmJhZHNzbC5jb22CCmJhZHNzbC5jb20wDQYJKoZIhvcNAQELBQADggEBAGlwCdbPxflZfYOaukZGCaxYK6gpincX4Lla4Ui2WdeQxE95w7fChXvP3YkE3UYUE7mupZ0eg4ZILr/A0e7JQDsgIu/SRTUE0domCKgPZ8v99k3Avka4LpLK51jHJJK7EFgo3ca2nldd97GM0MU41xHFk8qaK1tWJkfrrfcGwDJ4GQPIiLlm6i0yHq1Qg1RypAXJy5dTlRXlCLd8ufWhhiwW0W75Va5AEnJuqpQrKwl3KQVewGj67WWRgLfSr+4QG1mNvCZb2CkjZWmxkGPuoP40/y7Yu5OFqxP5tAjj4YixCYTWEVA0pmzIzgBg+JIe3PdRy27T0asgQW/F4TY61Yk="
//       ]
//     }
//   },
//   "network_events": [
//     {
//       "operation": "write",
//       "address": "104.154.89.105:443",
//       "started": 73983792,
//       "completed": 74024667,
//       "failure": null,
//       "num_bytes": 292
//     },
//     {
//       "operation": "read",
//       "address": "104.154.89.105:443",
//       "started": 74034792,
//       "completed": 397343084,
//       "failure": null,
//       "num_bytes": 517
//     },
//     {
//       "operation": "read",
//       "address": "104.154.89.105:443",
//       "started": 397691375,
//       "completed": 397707417,
//       "failure": null,
//       "num_bytes": 851
//     },
//     {
//       "operation": "write",
//       "address": "104.154.89.105:443",
//       "started": 398236000,
//       "completed": 398278875,
//       "failure": null,
//       "num_bytes": 7
//     }
//   ]
// }
// ```
//
// Let us also try with an expired certificate:
//
// ```bash
// go run -race ./internal/tutorial/measure/chapter04 -address 104.154.89.105:443 -sni expire.badssl.com
// ```
//
// And we get this JSON:
//
// ```JSON
// {
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "104.154.89.105:443",
//     "started": 25713041,
//     "completed": 80993666,
//     "failure": null
//   },
//   "tls_handshake": {
//     "engine": "stdlib",
//     "address": "104.154.89.105:443",
//     "config": {
//       "sni": "expired.badssl.com",
//       "alpn": [
//         "h2",
//         "http/1.1"
//       ],
//       "no_tls_verify": false
//     },
//     "started": 81000375,
//     "completed": 358963791,
//     "failure": "ssl_invalid_certificate",
//     "connection_state": {
//       "tls_version": "",
//       "cipher_suite": "",
//       "negotiated_protocol": "",
//       "peer_certificates": [
//         "MIIFSzCCBDOgAwIBAgIQSueVSfqavj8QDxekeOFpCTANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxNjA0BgNVBAMTLUNPTU9ETyBSU0EgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBDQTAeFw0xNTA0MDkwMDAwMDBaFw0xNTA0MTIyMzU5NTlaMFkxITAfBgNVBAsTGERvbWFpbiBDb250cm9sIFZhbGlkYXRlZDEdMBsGA1UECxMUUG9zaXRpdmVTU0wgV2lsZGNhcmQxFTATBgNVBAMUDCouYmFkc3NsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIE7PiM7gTCs9hQ1XBYzJMY61yoaEmwIrX5lZ6xKyx2PmzAS2BMTOqytMAPgLaw+XLJhgL5XEFdEyt/ccRLvOmULlA3pmccYYz2QULFRtMWhyefdOsKnRFSJiFzbIRMeVXk0WvoBj1IFVKtsyjbqv9u/2CVSndrOfEk0TG23U3AxPxTuW1CrbV8/q71FdIzSOciccfCFHpsKOo3St/qbLVytH5aohbcabFXRNsKEqveww9HdFxBIuGa+RuT5q0iBikusbpJHAwnnqP7i/dAcgCskgjZjFeEU4EFy+b+a1SYQCeFxxC7c3DvaRhBB0VVfPlkPz0sw6l865MaTIbRyoUCAwEAAaOCAdUwggHRMB8GA1UdIwQYMBaAFJCvajqUWgvYkOoSVnPfQ7Q6KNrnMB0GA1UdDgQWBBSd7sF7gQs6R2lxGH0RN5O8pRs/+zAOBgNVHQ8BAf8EBAMCBaAwDAYDVR0TAQH/BAIwADAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTwYDVR0gBEgwRjA6BgsrBgEEAbIxAQICBzArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5jb21vZG8uY29tL0NQUzAIBgZngQwBAgEwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL2NybC5jb21vZG9jYS5jb20vQ09NT0RPUlNBRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZlckNBLmNybDCBhQYIKwYBBQUHAQEEeTB3ME8GCCsGAQUFBzAChkNodHRwOi8vY3J0LmNvbW9kb2NhLmNvbS9DT01PRE9SU0FEb21haW5WYWxpZGF0aW9uU2VjdXJlU2VydmVyQ0EuY3J0MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wIwYDVR0RBBwwGoIMKi5iYWRzc2wuY29tggpiYWRzc2wuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQBqevHa/wMHcnjFZqFPRkMOXxQhjHUa6zbgH6QQFezaMyV8O7UKxwE4PSf9WNnM6i1pOXy+l+8L1gtY54x/v7NMHfO3kICmNnwUW+wHLQI+G1tjWxWrAPofOxkt3+IjEBEHfnJ/4r+3ABuYLyw/zoWaJ4wQIghBK4o+gk783SHGVnRwpDTysUCeK1iiWQ8dSO/rET7BSp68ZVVtxqPv1dSWzfGuJ/ekVxQ8lEEFeouhN0fX9X3c+s5vMaKwjOrMEpsi8TRwz311SotoKQwe6Zaoz7ASH1wq7mcvf71z81oBIgxw+s1F73hczg36TuHvzmWfRwxPuzZEaFZcVlmtqoq8"
//       ]
//     }
//   },
//   "network_events": [
//     {
//       "operation": "write",
//       "address": "104.154.89.105:443",
//       "started": 82211791,
//       "completed": 82236541,
//       "failure": null,
//       "num_bytes": 288
//     },
//     {
//       "operation": "read",
//       "address": "104.154.89.105:443",
//       "started": 82245000,
//       "completed": 356443250,
//       "failure": null,
//       "num_bytes": 517
//     },
//     {
//       "operation": "read",
//       "address": "104.154.89.105:443",
//       "started": 356880666,
//       "completed": 356929875,
//       "failure": null,
//       "num_bytes": 4271
//     },
//     {
//       "operation": "write",
//       "address": "104.154.89.105:443",
//       "started": 358550458,
//       "completed": 358603458,
//       "failure": null,
//       "num_bytes": 7
//     }
//   ]
// }
// ```
//
// Let's run further experiments using jafar (`go build -v ./internal/cmd/jafar`)
// and a Linux box to simulate censorship conditions.
//
// ```bash
// sudo ./jafar -iptables-reset-keyword dns.google
// ```
//
// In another terminal:
//
// ```bash
// go run ./internal/tutorial/measure/chapter04
// ```
//
// We obtain this JSON:
//
// ```JSON
// {
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "8.8.4.4:443",
//     "started": 3492836,
//     "completed": 29285156,
//     "failure": null
//   },
//   "tls_handshake": {
//     "engine": "stdlib",
//     "address": "8.8.4.4:443",
//     "config": {
//       "sni": "dns.google",
//       "alpn": [
//         "h2",
//         "http/1.1"
//       ],
//       "no_tls_verify": false
//     },
//     "started": 29291891,
//     "completed": 30038930,
//     "failure": "connection_reset",
//     "connection_state": null
//   },
//   "network_events": [
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 29819435,
//       "completed": 29910007,
//       "failure": null,
//       "num_bytes": 280
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 29933313,
//       "completed": 29949954,
//       "failure": "connection_reset",
//       "num_bytes": 0
//     }
//   ]
// }
// ```
//
// This is what happens when there is a RST based on the SNI. (You can
// now use Ctrl-C to interrupt `jafar`.)
//
// Let us now see what happens if a packet in the handshake is dropped:
//
// ```bash
// sudo ./jafar -iptables-drop-keyword dns.google
// ```
//
// and
//
// ```bash
// go run ./internal/tutorial/measure/chapter04 -timeout 1h
// ```
//
// obtaining this JSON:
//
// ```JSON
// {
//   "tcp_connect": {
//     "network": "tcp",
//     "address": "8.8.4.4:443",
//     "started": 3496412,
//     "completed": 25569674,
//     "failure": null
//   },
//   "tls_handshake": {
//     "engine": "stdlib",
//     "address": "8.8.4.4:443",
//     "config": {
//       "sni": "dns.google",
//       "alpn": [
//         "h2",
//         "http/1.1"
//       ],
//       "no_tls_verify": false
//     },
//     "started": 25573154,
//     "completed": 10034884346,
//     "failure": "generic_timeout_error",
//     "connection_state": null
//   },
//   "network_events": [
//     {
//       "operation": "write",
//       "address": "8.8.4.4:443",
//       "started": 25881975,
//       "completed": 25903293,
//       "failure": null,
//       "num_bytes": 280
//     },
//     {
//       "operation": "read",
//       "address": "8.8.4.4:443",
//       "started": 25917060,
//       "completed": 10034797119,
//       "failure": "generic_timeout_error",
//       "num_bytes": 0
//     }
//   ]
// }
// ```
//
// We see the timeout and we see that the watchdog timeout for
// the TLS hanshake is set to ten seconds. (You can now interrupt
// `jafar` by using Cltr-C.)
//
// ## Conclusion
//
// We have seen how to measure TLS handshakes. We have seen how
// this flow produces different output on different error conditions.
//
// -=-=- StopHere -=-=-
