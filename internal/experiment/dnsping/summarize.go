package dnsping

import (
	"fmt"
	"io"
	"os"

	"github.com/ooni/probe-cli/v3/internal/geoipx"
	"github.com/ooni/probe-cli/v3/internal/model"
)

// summarize summarizes the results.
func summarize(tk *TestKeys) {
	// print a summary of the addresses we have seen
	as := &addressSummarizer{}
	as.load(tk)
	as.printf(os.Stdout)
}

// summarizeAddressStats contains stats about a resolved IP address
// as generated by the [*addressSummarizer].
type summarizeAddressStats struct {
	Domain      string
	IPAddress   string
	ASN         uint
	ASOrg       string
	NumResolved int
	Late        bool
}

// addressSummarizer creates a summary for addresses.
//
// The zero value is ready to use.
type addressSummarizer struct {
	m map[string]map[string]*summarizeAddressStats
}

func (as *addressSummarizer) printf(w io.Writer) {
	fmt.Fprintf(w, "\n\n")

	fmt.Fprintf(
		w,
		"%-30s %-48s %-10s %-30s %-10s %-10s\n",
		"Domain",
		"IPAddress",
		"ASN",
		"Org",
		"#Seen",
		"LateResponse",
	)

	fmt.Fprintf(w, "--------------------------------------------------------------------------------------------------------------------------------------------------\n")

	for _, domainAddresses := range as.m {
		for _, stats := range domainAddresses {
			fmt.Fprintf(
				w,
				"%-30s %-48s %-10d %-30s %-10d %-10v\n",
				stats.Domain,
				stats.IPAddress,
				stats.ASN,
				stats.ASOrg,
				stats.NumResolved,
				stats.Late,
			)
		}
	}

	fmt.Fprintf(w, "\n\n")
}

// load loads information from the [*TestKeys].
//
// This method MAY MUTATE the [*addressSummarizer] content.
func (as *addressSummarizer) load(tk *TestKeys) {
	for _, ping := range tk.Pings {
		as.loadQuery(ping.Query, false)
		for _, q := range ping.DelayedResponses {
			as.loadQuery(q, true)
		}
	}
}

// loadQuery loads a single query result.
//
// This method MAY MUTATE the [*addressSummarizer] content.
func (as *addressSummarizer) loadQuery(query *model.ArchivalDNSLookupResult, late bool) {
	for _, answer := range query.Answers {
		switch answer.AnswerType {
		case "A":
			as.addAnswer(query.Hostname, answer.IPv4, late)

		case "AAAA":
			as.addAnswer(query.Hostname, answer.IPv6, late)
		}
	}
}

// addAnswer adds a single answer.
//
// This method MAY MUTATE the [*addressSummarizer] content.
func (as *addressSummarizer) addAnswer(hostname string, ipAddr string, late bool) {
	if as.m == nil {
		as.m = make(map[string]map[string]*summarizeAddressStats)
	}
	if as.m[hostname] == nil {
		as.m[hostname] = make(map[string]*summarizeAddressStats)
	}
	if as.m[hostname][ipAddr] == nil {
		asNum, asOrg, _ := geoipx.LookupASN(ipAddr)
		as.m[hostname][ipAddr] = &summarizeAddressStats{
			Domain:      hostname,
			IPAddress:   ipAddr,
			NumResolved: 0,
			Late:        late,
			ASN:         asNum,
			ASOrg:       asOrg,
		}
	}
	entry := as.m[hostname][ipAddr]
	entry.NumResolved++
}
