#!/bin/bash

#
# Here we make sure we are compiling with the expected
# environment when compiling for Android or iOS.
#
# This script tests the OpenSSL builds. There is another
# script testing for the autotools case.
#

set -euo pipefail

topdir=$(dirname $(dirname $(dirname $(realpath $0))))

android_home=$($topdir/MOBILE/android/home)
android_ndk_root=$android_home/ndk/$(cat $topdir/NDKVERSION)

sysname="$(uname -s | tr [A-Z] [a-z])-$(uname -m)"
if [[ "$sysname" == "darwin-arm64" ]]; then
	# QUIRK: the NDK is currently only available for amd64
	sysname="darwin-x86_64"
fi
toolchain="$android_ndk_root/toolchains/llvm/prebuilt/$sysname"

check_for_executable() {
	local name=$1
	local value=$2
	echo -n "checking for $name... " 1>&2
	if [[ ! -x $value ]]; then
		echo "not an executable path: $value" 1>&2
		exit 1
	fi
	echo "$value" 1>&2
}

check_for_variable_value() {
	local name=$1
	local actual_value=$2
	local expected_value=$3
	echo -n "checking for $name... " 1>&2
	if [[ "$actual_value" != "$expected_value" ]]; then
		echo "unexpected value: $actual_value" 1>&2
		exit 1
	fi
	echo "$actual_value" 1>&2
}

case $GOOS in
android)
	case $GOARCH in
	arm64)
		check_for_variable_value CFLAGS "$CFLAGS" "-fdata-sections -ffunction-sections -fstack-protector-strong -funwind-tables -no-canonical-prefixes -D_FORTIFY_SOURCE=2 -fpic -O2 -DANDROID -fsanitize=safe-stack -fsanitize=bounds -fsanitize-undefined-trap-on-error"
		check_for_variable_value OPENSSL_COMPILER "$OPENSSL_COMPILER" "android-arm64 -D__ANDROID_API__=21"
		;;
	arm)
		check_for_variable_value CFLAGS "$CFLAGS" "-fdata-sections -ffunction-sections -fstack-protector-strong -funwind-tables -no-canonical-prefixes -D_FORTIFY_SOURCE=2 -fpic -Oz -DANDROID -fsanitize=bounds -fsanitize-undefined-trap-on-error -mthumb"
		check_for_variable_value OPENSSL_COMPILER "$OPENSSL_COMPILER" "android-arm -D__ANDROID_API__=21"
		;;

	386)
		check_for_variable_value CFLAGS "$CFLAGS" "-fdata-sections -ffunction-sections -fstack-protector-strong -funwind-tables -no-canonical-prefixes -D_FORTIFY_SOURCE=2 -fPIC -O2 -DANDROID -fsanitize=safe-stack -fstack-clash-protection -fsanitize=bounds -fsanitize-undefined-trap-on-error -mstackrealign"
		check_for_variable_value OPENSSL_COMPILER "$OPENSSL_COMPILER" "android-x86 -D__ANDROID_API__=21"
		;;

	amd64)
		check_for_variable_value CFLAGS "$CFLAGS" "-fdata-sections -ffunction-sections -fstack-protector-strong -funwind-tables -no-canonical-prefixes -D_FORTIFY_SOURCE=2 -fPIC -O2 -DANDROID -fsanitize=safe-stack -fstack-clash-protection -fsanitize=bounds -fsanitize-undefined-trap-on-error"
		check_for_variable_value OPENSSL_COMPILER "$OPENSSL_COMPILER" "android-x86_64 -D__ANDROID_API__=21"
		;;

	*)
		echo "FATAL: unsupported \$GOARCH value: $GOARCH" 1>&2
		exit 1
		;;
	esac

	# See https://stackoverflow.com/a/1397020
	echo -n "checking whether path contains $toolchain/bin... "
	if [[ ":$PATH:" != *":$toolchain/bin:"* ]]; then
		echo "no" 1>&2
		exit 1
	fi
	echo "yes"

	check_for_variable_value ANDROID_HOME "$ANDROID_HOME" "$android_home"
	check_for_variable_value ANDROID_NDK_HOME "$ANDROID_NDK_HOME" "$android_ndk_root"

	check_for_variable_value DESTDIR "$DESTDIR" "$topdir/internal/libtor/android/$GOARCH"
	;;

*)
	echo "FATAL: unsupported \$GOOS value: $GOOS" 1>&2
	exit 1
	;;
esac
