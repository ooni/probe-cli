# File generated by `go run ./internal/cmd/ghgen`; DO NOT EDIT.

name: linux
on:
  push:
    branches:
      - "release/**"
      - "fullbuild"
      - "linuxbuild"
    tags:
      - "v*"
  schedule:
    - cron: "17 1 * * *"

jobs:
  build_linux_cli_386:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - name: Get GOVERSION content
        id: goversion
        run: echo "version=$(cat GOVERSION)" >> "$GITHUB_OUTPUT"
      - uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-linux-386-${{ steps.goversion.outputs.version }}"

      - uses: actions/cache@v3
        with:
          path: GOCACHE
          key: linux-build-cache-386

      - run: make CLI/linux-static-386

      - uses: actions/upload-artifact@v3
        with:
          name: ooniprobe-linux-386
          path: ./CLI/ooniprobe-linux-386

      - uses: actions/upload-artifact@v3
        with:
          name: miniooni-linux-386
          path: ./CLI/miniooni-linux-386

  publish_linux_cli_386:
    runs-on: ubuntu-22.04
    needs: build_linux_cli_386
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ooniprobe-linux-386

      - uses: actions/download-artifact@v3
        with:
          name: miniooni-linux-386

      - run: ./script/ghpublish.bash ooniprobe-linux-386 miniooni-linux-386
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux_cli_amd64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - name: Get GOVERSION content
        id: goversion
        run: echo "version=$(cat GOVERSION)" >> "$GITHUB_OUTPUT"
      - uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-linux-amd64-${{ steps.goversion.outputs.version }}"

      - uses: actions/cache@v3
        with:
          path: GOCACHE
          key: linux-build-cache-amd64

      - run: make CLI/linux-static-amd64

      - uses: actions/upload-artifact@v3
        with:
          name: ooniprobe-linux-amd64
          path: ./CLI/ooniprobe-linux-amd64

      - uses: actions/upload-artifact@v3
        with:
          name: miniooni-linux-amd64
          path: ./CLI/miniooni-linux-amd64

  test_linux_cli_amd64:
    runs-on: ubuntu-22.04
    needs: build_linux_cli_amd64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ooniprobe-linux-amd64

      - uses: actions/download-artifact@v3
        with:
          name: miniooni-linux-amd64

      - name: Get GOVERSION content
        id: goversion
        run: echo "version=$(cat GOVERSION)" >> "$GITHUB_OUTPUT"
      - uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-linux-amd64-${{ steps.goversion.outputs.version }}"

      - run: sudo apt-get update -q
      - run: sudo apt-get install -y tor

      - run: chmod +x ooniprobe-linux-amd64
      - run: ./E2E/ooniprobe.bash ./ooniprobe-linux-amd64
        shell: bash

      - run: chmod +x miniooni-linux-amd64
      - run: ./E2E/miniooni.bash ./miniooni-linux-amd64
        shell: bash

  publish_linux_cli_amd64:
    runs-on: ubuntu-22.04
    needs: test_linux_cli_amd64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ooniprobe-linux-amd64

      - uses: actions/download-artifact@v3
        with:
          name: miniooni-linux-amd64

      - run: ./script/ghpublish.bash ooniprobe-linux-amd64 miniooni-linux-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux_cli_armv6:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: sudo apt-get update -q
      - run: sudo apt-get install -y qemu-user-static

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - name: Get GOVERSION content
        id: goversion
        run: echo "version=$(cat GOVERSION)" >> "$GITHUB_OUTPUT"
      - uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-linux-armv6-${{ steps.goversion.outputs.version }}"

      - uses: actions/cache@v3
        with:
          path: GOCACHE
          key: linux-build-cache-armv6

      - run: make CLI/linux-static-armv6

      - uses: actions/upload-artifact@v3
        with:
          name: ooniprobe-linux-armv6
          path: ./CLI/ooniprobe-linux-armv6

      - uses: actions/upload-artifact@v3
        with:
          name: miniooni-linux-armv6
          path: ./CLI/miniooni-linux-armv6

  publish_linux_cli_armv6:
    runs-on: ubuntu-22.04
    needs: build_linux_cli_armv6
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ooniprobe-linux-armv6

      - uses: actions/download-artifact@v3
        with:
          name: miniooni-linux-armv6

      - run: ./script/ghpublish.bash ooniprobe-linux-armv6 miniooni-linux-armv6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux_cli_armv7:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: sudo apt-get update -q
      - run: sudo apt-get install -y qemu-user-static

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - name: Get GOVERSION content
        id: goversion
        run: echo "version=$(cat GOVERSION)" >> "$GITHUB_OUTPUT"
      - uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-linux-armv7-${{ steps.goversion.outputs.version }}"

      - uses: actions/cache@v3
        with:
          path: GOCACHE
          key: linux-build-cache-armv7

      - run: make CLI/linux-static-armv7

      - uses: actions/upload-artifact@v3
        with:
          name: ooniprobe-linux-armv7
          path: ./CLI/ooniprobe-linux-armv7

      - uses: actions/upload-artifact@v3
        with:
          name: miniooni-linux-armv7
          path: ./CLI/miniooni-linux-armv7

  publish_linux_cli_armv7:
    runs-on: ubuntu-22.04
    needs: build_linux_cli_armv7
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ooniprobe-linux-armv7

      - uses: actions/download-artifact@v3
        with:
          name: miniooni-linux-armv7

      - run: ./script/ghpublish.bash ooniprobe-linux-armv7 miniooni-linux-armv7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux_cli_arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: sudo apt-get update -q
      - run: sudo apt-get install -y qemu-user-static

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - name: Get GOVERSION content
        id: goversion
        run: echo "version=$(cat GOVERSION)" >> "$GITHUB_OUTPUT"
      - uses: magnetikonline/action-golang-cache@v4
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-linux-arm64-${{ steps.goversion.outputs.version }}"

      - uses: actions/cache@v3
        with:
          path: GOCACHE
          key: linux-build-cache-arm64

      - run: make CLI/linux-static-arm64

      - uses: actions/upload-artifact@v3
        with:
          name: ooniprobe-linux-arm64
          path: ./CLI/ooniprobe-linux-arm64

      - uses: actions/upload-artifact@v3
        with:
          name: miniooni-linux-arm64
          path: ./CLI/miniooni-linux-arm64

  publish_linux_cli_arm64:
    runs-on: ubuntu-22.04
    needs: build_linux_cli_arm64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ooniprobe-linux-arm64

      - uses: actions/download-artifact@v3
        with:
          name: miniooni-linux-arm64

      - run: ./script/ghpublish.bash ooniprobe-linux-arm64 miniooni-linux-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# End of autogenerated file
