# File generated by `go run ./GHGEN`; DO NOT EDIT.

name: android
on:
  push:
    branches:
      - "release/**"
      - "fullbuild"
      - "androidbuild"
    tags:
      - "v*"
  schedule:
    - cron: "17 1 * * *"

jobs:
  build_android_mobile:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get GOVERSION content
        id: goversion
        run: echo ::set-output name=version::$(cat GOVERSION)
      - uses: magnetikonline/action-golang-cache@v2
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-android-oonimkall-${{ steps.goversion.outputs.version }}"

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - run: make MOBILE/android

      - uses: actions/upload-artifact@v2
        with:
          name: oonimkall.aar
          path: ./MOBILE/android/oonimkall.aar

      - uses: actions/upload-artifact@v2
        with:
          name: oonimkall-sources.jar
          path: ./MOBILE/android/oonimkall-sources.jar

      - uses: actions/upload-artifact@v2
        with:
          name: oonimkall.pom
          path: ./MOBILE/android/oonimkall.pom

  publish_android_mobile:
    runs-on: ubuntu-20.04
    needs: build_android_mobile
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: oonimkall.aar

      - uses: actions/download-artifact@v2
        with:
          name: oonimkall-sources.jar

      - uses: actions/download-artifact@v2
        with:
          name: oonimkall.pom

      - run: ./script/ghpublish.bash oonimkall.aar oonimkall-sources.jar oonimkall.pom
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_android_cli_386:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get GOVERSION content
        id: goversion
        run: echo ::set-output name=version::$(cat GOVERSION)
      - uses: magnetikonline/action-golang-cache@v2
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-android-cli-386-${{ steps.goversion.outputs.version }}"

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - run: make CLI/android-386

      - uses: actions/upload-artifact@v2
        with:
          name: miniooni-android-386
          path: ./CLI/miniooni-android-386

      - uses: actions/upload-artifact@v2
        with:
          name: ooniprobe-android-386
          path: ./CLI/ooniprobe-android-386

  publish_android_cli_386:
    runs-on: ubuntu-20.04
    needs: build_android_cli_386
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: miniooni-android-386

      - uses: actions/download-artifact@v2
        with:
          name: ooniprobe-android-386

      - run: ./script/ghpublish.bash miniooni-android-386 ooniprobe-android-386
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_android_cli_amd64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get GOVERSION content
        id: goversion
        run: echo ::set-output name=version::$(cat GOVERSION)
      - uses: magnetikonline/action-golang-cache@v2
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-android-cli-amd64-${{ steps.goversion.outputs.version }}"

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - run: make CLI/android-amd64

      - uses: actions/upload-artifact@v2
        with:
          name: miniooni-android-amd64
          path: ./CLI/miniooni-android-amd64

      - uses: actions/upload-artifact@v2
        with:
          name: ooniprobe-android-amd64
          path: ./CLI/ooniprobe-android-amd64

  publish_android_cli_amd64:
    runs-on: ubuntu-20.04
    needs: build_android_cli_amd64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: miniooni-android-amd64

      - uses: actions/download-artifact@v2
        with:
          name: ooniprobe-android-amd64

      - run: ./script/ghpublish.bash miniooni-android-amd64 ooniprobe-android-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_android_cli_arm:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get GOVERSION content
        id: goversion
        run: echo ::set-output name=version::$(cat GOVERSION)
      - uses: magnetikonline/action-golang-cache@v2
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-android-cli-arm-${{ steps.goversion.outputs.version }}"

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - run: make CLI/android-arm

      - uses: actions/upload-artifact@v2
        with:
          name: miniooni-android-arm
          path: ./CLI/miniooni-android-arm

      - uses: actions/upload-artifact@v2
        with:
          name: ooniprobe-android-arm
          path: ./CLI/ooniprobe-android-arm

  publish_android_cli_arm:
    runs-on: ubuntu-20.04
    needs: build_android_cli_arm
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: miniooni-android-arm

      - uses: actions/download-artifact@v2
        with:
          name: ooniprobe-android-arm

      - run: ./script/ghpublish.bash miniooni-android-arm ooniprobe-android-arm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_android_cli_arm64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get GOVERSION content
        id: goversion
        run: echo ::set-output name=version::$(cat GOVERSION)
      - uses: magnetikonline/action-golang-cache@v2
        with:
          go-version: "${{ steps.goversion.outputs.version }}"
          cache-key-suffix: "-android-cli-arm64-${{ steps.goversion.outputs.version }}"

      - run: |
          echo -n $PSIPHON_CONFIG_KEY > ./internal/engine/psiphon-config.key
          echo $PSIPHON_CONFIG_JSON_AGE_BASE64 | base64 -d > ./internal/engine/psiphon-config.json.age
        env:
          PSIPHON_CONFIG_KEY: ${{ secrets.PSIPHON_CONFIG_KEY }}
          PSIPHON_CONFIG_JSON_AGE_BASE64: ${{ secrets.PSIPHON_CONFIG_JSON_AGE_BASE64 }}

      - run: make CLI/android-arm64

      - uses: actions/upload-artifact@v2
        with:
          name: miniooni-android-arm64
          path: ./CLI/miniooni-android-arm64

      - uses: actions/upload-artifact@v2
        with:
          name: ooniprobe-android-arm64
          path: ./CLI/ooniprobe-android-arm64

  publish_android_cli_arm64:
    runs-on: ubuntu-20.04
    needs: build_android_cli_arm64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: miniooni-android-arm64

      - uses: actions/download-artifact@v2
        with:
          name: ooniprobe-android-arm64

      - run: ./script/ghpublish.bash miniooni-android-arm64 ooniprobe-android-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# End of autogenerated file
