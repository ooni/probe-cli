name: build-windows
description: Builds ooniprobe, miniooni, or some other product for Windows.

inputs:
  goarch:
    description: Golang target architecture
    required: true

  package:
    description: Package to compile to generate the build
    required: true

  golang_extra_options:
    description: Extra options to pass to the golang compiler
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        set -euo pipefail
        GOOS=windows
        GOARCH=${{ inputs.goarch }}
        if [[ $GOARCH = "amd64" ]]; then
          CC=x86_64-w64-mingw32-gcc
        elif [[ $GOARCH = "386" ]]; then
          CC=i686-w64-mingw32-gcc
        else
          echo "FATAL: unsupported GOARCH: $GOARCH" 1>&2
          exit 1
        fi
        OONI_PRODUCT_NAME=$(basename ${{ inputs.package }})
        OONI_ENGINE=./internal/engine
        OONI_CONFIG_KEY=$OONI_ENGINE/psiphon-config.key
        OONI_CONFIG_JSON_AGE=$OONI_ENGINE/psiphon-config.json.age
        if [[ -f $OONI_CONFIG_KEY && -f $OONI_CONFIG_JSON_AGE ]]; then
          OONI_PSIPHON_TAGS=ooni_psiphon_tags
        else
          OONI_PSIPHON_TAGS=""
        fi
        if [[ $(go version | awk '{print $3}') != go1.18.3 ]]; then
          echo "FATAL: we need to build using go1.18.3" 1>&2
          exit 1
        fi
        set -x
        export CGO_ENABLED=1
        export CC=$CC
        export GOOS=$GOOS
        export GOARCH=$GOARCH
        go build -tags=$OONI_PSIPHON_TAGS -ldflags="-s -w" \
                 -o ./CLI/$OONI_PRODUCT_NAME-$GOOS-$GOARCH \
                 ${{ inputs.golang_extra_options }} \
                 ${{ inputs.package }}
